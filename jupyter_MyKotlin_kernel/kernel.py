###%file:kotlin_kernel.py
#
#   MyKotlin Jupyter Kernel 
#   generated by MyPython
#
from math import exp
from queue import Queue
from threading import Thread
from ipykernel.kernelbase import Kernel
from pexpect import replwrap, EOF
from jinja2 import Environment, PackageLoader, select_autoescape,Template
from abc import ABCMeta, abstractmethod
from typing import List, Dict, Tuple, Sequence
from shutil import copyfile,move
from urllib.request import urlopen
import socket
import copy
import mmap
import contextlib
import atexit
import platform
import atexit
import base64
import urllib.request
import urllib.parse
import pexpect
import signal
import typing 
import typing as t
import re
import signal
import subprocess
import tempfile
import os
import stat
import sys
import traceback
import os.path as path
import codecs
import time
import importlib
import importlib.util
import inspect
from . import ipynbfile
from plugins.ISpecialID import IStag,IDtag,IBtag,ITag,ICodePreproc
from plugins._filter2_magics import Magics
try:
    zerorpc=__import__("zerorpc")
    # import zerorpc
except:
    pass
fcntl = None
msvcrt = None
bLinux = True
if platform.system() != 'Windows':
    fcntl = __import__("fcntl")
    bLinux = True
else:
    msvcrt = __import__('msvcrt')
    bLinux = False
from .MyKernel import MyKernel
class KotlinKernel(MyKernel):
    implementation = 'jupyter-MyKotlin-kernel'
    implementation_version = '1.0'
    language = 'kotlin'
    language_version = ''
    language_info = {'name': 'text/kotlin',
                     'mimetype': 'text/kotlin',
                     'file_extension': '.kt'}
    runfiletype='class'
    banner = "MyKotlin kernel.\n" \
             "Uses kotlinc, compiles in kotlin, and creates source code files and executables in temporary folder.\n"
    main_head = "#include <stdio.h>\n" \
            "#include <math.h>\n" \
            "int main(int argc, char* argv[], char** env){\n"
    main_foot = "\nreturn 0;\n}"
##//%include:src/comm_attribute.py
    def __init__(self, *args, **kwargs):
        super(KotlinKernel, self).__init__(*args, **kwargs)
        self.runfiletype='class'
        self.kernelinfo="[MyKotlinKernel{0}]".format(time.strftime("%H%M%S", time.localtime()))
        
#################
    def compile_with_kotlinc(self, source_filename, 
        binary_filepath=None, 
        cflags=None, ldflags=None,
        env=None,coptions=None,magics=None):
        # coptions = ['-b', '', '-cp', '', '-j'] + cflags
        outpath=os.path.dirname(source_filename)
        sf = os.path.basename(source_filename)
        binary_filename = sf.split(".")[0]
        # if self.linkMaths:
        #     cflags = cflags + ['-lm']
        # if self.wError:
        #     cflags = cflags + ['-Werror']
        # if self.wAll:
        #     cflags = cflags + ['-Wall']
        # if self.readOnlyFileSystem:
        #     cflags = ['-DREAD_ONLY_FILE_SYSTEM'] + cflags
        # if self.bufferedOutput:
        #     cflags = ['-DBUFFERED_OUTPUT'] + cflags
        index=-1
        if coptions==None:
            coptions=[]
        for s in coptions:
            index=index+1
            if s=='-d':
                outpath=coptions[index+1]
                if not outpath.startswith('-'):
                    #剔除 -d参数和值
                    outpath=coptions.pop(index+1)
                    coptions.pop(index)
            else:
                if binary_filepath!=None:
                    outpath=binary_filepath
        args = ['kotlinc']+coptions+ ['-d', outpath]+[ source_filename]
        self.mymagics._log(' '.join((' '+ str(s) for s in args))+"\n")
        binary_filename=binary_filename.capitalize()
        binary_filename=os.path.join(outpath,binary_filename)
        binary_filename=binary_filename+"Kt" 
        # self.mymagics._log("binary_filename:"+binary_filename+"\n")
        return self.mymagics.create_jupyter_subprocess(args,env=env,magics=magics),binary_filename+".class",args
    def _exec_kotlinc_(self,source_filename,magics):
        self.mymagics._logln('Generating binary file')
        magics['status']='compiling'
        p,outfile,gcccmd = self.compile_with_kotlinc(
            source_filename, 
            None,
            self.mymagics.get_magicsSvalue(magics,'cflags'),
            self.mymagics.get_magicsSvalue(magics,'ldflags'),
            self.mymagics.get_magicsbykey(magics,'env'),
            self.mymagics.get_magicsSvalue(magics,'coptions'),
            magics
            )
        returncode=p.wait_end(magics)
        p.write_contents()
        magics['status']=''
        if returncode != 0:  # Compilation failed
            self.mymagics._logln(''.join((str(s) for s in ccmd)),3)
            self.mymagics._logln("Kotlin exited with code {}, the executable will not be executed".format(returncode),3)
            # delete source files before exit
            os.remove(source_filename)
            # os.remove(binary_file.name)
        return p.returncode,outfile
##do_runcode
    def do_runcode(self,return_code,file_name,class_filename,outpath,magics,code, silent, store_history=True,
                    user_expressions=None, allow_stdin=True):
        return_code=return_code
        file_name=file_name
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        retstr=''
        ##代码运行前
        mainclass=(magics['package']+"." if len(magics['package'])>0 else '') +class_filename
        self.mymagics.chkjoptions(magics,'/root/.sdkman/candidates/kotlin/1.6.0/lib/kotlin-stdlib.jar',outpath)
        
        self.mymagics._write_to_stdout("The process :"+mainclass+"\n")
        ################# repl mode run code files
        #FIXME:
        if magics['_st']['runmode']=='repl':
            self.mymagics._start_replprg('java',magics['_st']['joptions']+[mainclass] + magics['_st']['args'],magics)
            return_code=p.returncode
            bcancel_exec,retstr=self.mymagics.raise_plugin(code,magics,return_code,file_name,3,2)
            return bcancel_exec,retinfo,magics, code,file_name,retstr
        ############################################
    ############################################
        #################dynamically load and execute code
        #FIXME:
        # if len(magics['dlrun'])>0:
        #     p = self.mymagics.create_jupyter_subprocess([self.master_path, mainclass] + magics['args'],env=self.addkey2dict(magics,'env'))
        # #################
        # else:
        cmdstr = ['java']+magics['_st']['joptions']+[mainclass] + magics['_st']['args']
        # self._log(' '.join((' '+ str(s) for s in cmdstr))+"\n")
        p = self.mymagics.create_jupyter_subprocess(['java']+magics['_st']['joptions']+[mainclass] + magics['_st']['args'],env=self.mymagics.addkey2dict(magics,'env'),magics=magics)
        self.mymagics.subprocess=p
        self.mymagics.g_rtsps[str(p.pid)]=p
        return_code=p.returncode
        ##代码启动后
        bcancel_exec,retstr=self.mymagics.raise_plugin(code,magics,return_code,file_name,3,2)
        # if bcancel_exec:return bcancel_exec,retinfo,magics, code,file_name,retstr
        
        if len(self.mymagics.addkey2dict(magics,'showpid'))>0:
            self.mymagics._write_to_stdout("The process PID:"+str(p.pid)+"\n")
        return_code=p.wait_end(magics)
        ##代码运行结束
        # now remove the files we have just created
        # if(os.path.exists(source_file.name)):
        #     os.remove(source_file.name)
        # if(os.path.exists(class_filename)):
            # os.remove(class_filename)
        if p.returncode != 0:
            self.mymagics._logln("Executable exited with code {}".format(p.returncode))
        return bcancel_exec,retinfo,magics, code,file_name,retstr
##do_compile_code
    def do_compile_code(self,return_code,file_name,magics,code, silent, store_history=True,
                    user_expressions=None, allow_stdin=True):
        return_code=0
        file_name=file_name
        sourcefilename=file_name
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        retstr=''
        
        # if len(self.mymagics.addkey2dict(magics,'file'))>0:
        #     file_name=magics['file'][0]
        # else: file_name=source_file.name
        returncode,class_filename=self._exec_kotlinc_(file_name,magics)
        file_name=class_filename
        outpath=os.path.dirname(class_filename)
        sf = os.path.basename(class_filename)
        class_filename = sf.split(".")[0]
        return_code=returncode
        mainclass=class_filename
        if returncode!=0:return True,self.mymagics.get_retinfo(),magics, code,file_name,class_filename,outpath,retstr
        # Generate executable file :end
        return bcancel_exec,retinfo,magics, code,file_name,class_filename,outpath,retstr
##do_create_codefile
    def do_create_codefile(self,magics,code, silent, store_history=True,
                    user_expressions=None, allow_stdin=True):
        return_code=0
        file_name=''
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        retstr=''
        class_filename=''
        outpath=''
        source_file=self.mymagics.create_codetemp_file(magics,code,suffix='.kt')
        newsrcfilename=source_file.name
        file_name=newsrcfilename
        return_code=True
        
        ############# only run gcc，no not run executable file
        # if len(self.addkey2dict(magics,'onlyrungcc'))>0:
        #     self._log("only run gcc \n")
        return  bcancel_exec,self.mymagics.get_retinfo(),magics, code,file_name,class_filename,outpath,retstr
    def do_preexecute(self,code,magics, silent, store_history=True,
                user_expressions=None, allow_stdin=False):
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
    
        ##扫描代码
        #############send replcmd's command
        if magics['_st']['runmode']=='repl':
            if hasattr(self, 'replcmdwrapper'):
                if self.mymagics.replcmdwrapper :
                    bcancel_exec=True
                    retinfo= self.mymagics.repl_sendcmd(code, silent, store_history,
                        user_expressions, allow_stdin,magics)
                    return bcancel_exec,retinfo,magics, code
        
        return bcancel_exec,retinfo,magics, code
